theory IKEv1
begin

/* IKEv1 protocol:
   A -> B : aenc_B{A}, aenc_B{N_A}, g^x  (N_A fresh nonce, x fresh)
   B -> A : aenc_A{B}, aenc_A{N_B}, g^y, HASH_B  (y fresh)
   A -> B : HASH_A
where:
   HASH_R = prf(<skID, g^x, g^y, A, B>)
   HASH_I = prf(<skID, g^y, g^x, B, A>)
   skID = prf(<h(<N_A, N_B>), A, B>)

     */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing

/*Define an abstract function prf with no additional algebraic properties
representing a "perfect" pseudo-random function. */
functions: prf/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 7*/

/*----------------*/
/* Protocol rules */
/*----------------*/

rule Init_1:
  let gxI = 'g'^~xI in
  [ Fr(~NA),
    Fr(~xI),
    !Pk($B, pkB) ]
  -->
  [ Init_1($A, ~xI, ~NA, gxI),
    Out(<aenc($A, pkB), aenc(~NA, pkB), gxI>) ]

rule Resp_1:
  let gyR = 'g'^~yR 
      pkB = pk(~kB)
      skID = prf(<h(<NA, ~NB>), a, $B>)
      hashR = prf(<skID, X, gyR, a, $B>)
      hashI = prf(<skID, gyR, X, $B, a>)
      kR = prf(<skID, X^~yR>)
  in
  [ Fr(~yR),
    Fr(~NB),
    !Pk(a, pkA),
    !Key($B, ~kB),
    In(<aenc(a, pkB), aenc(NA, pkB), X>) ]
  --[ RunningR($B, a, kR) ]->
  [ Resp_1($B, hashI, a, kR),
    Out(<aenc($B, pkA), aenc(~NB, pkA), gyR, hashR>) ]

rule Init_2:
  let pkA = pk(~kA) 
      skID = prf(<h(<~NA, NB>), $A, b>)
      hashI = prf(<skID, Y, gxI, b, $A>)
      hashR = prf(<skID, gxI, Y, $A, b>)
      kI = prf(<skID, Y^~xI>)
  in
  [ Init_1($A, ~xI, ~NA, gxI),
    !Key($A, ~kA),
    In(<aenc(b, pkA), aenc(NB, pkA), Y, hashR_recv>) ]
  --[ Eq(hashR, hashR_recv),
      FinishedI($A),
      SecretI($A, b, kI),
      CommitI($A, b, kI),
      RunningI($A, b, kI) ]->
  [ Out(hashI) ]

  
rule Resp_2:
  [ Resp_1($B, hashI, a, kR),
    In(hashI_recv) ]
  --[ Eq(hashI, hashI_recv),
      SecretR($B, a, kR),
      FinishedR($B),
      CommitR($B, a, kR) ]->
  []


/* ---------- */
/* Key Reveal */
/* ---------- */

rule RevealKey:
   [ !Key(A, kA) ]
   --[ Compromised(A) ]->
   [ K(kA) ]


/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"



/* Perfect Forward Secrecy:  (Question 8)
Please uncomment the following two lemmas for this question.
*/


lemma secrecy_PFS_R:
 " All A B k #i. 
    SecretR(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"


lemma secrecy_PFS_I:
 " All A B k #i. 
    SecretI(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"

end



