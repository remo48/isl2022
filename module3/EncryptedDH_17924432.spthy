theory EncryptedDH
begin

/* Signed Diffie-Hellman protocol, first attempt:
   A -> B : A, aenc_B{g^x}  (x fresh)
   B -> A : B, aenc_A{g^y, h(g^x)}  (y fresh)
   A -> B : A, aenc_B{h(g^y)}  */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman, asymmetric encryption and hashing equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing



/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule GenKey:  // generate long-term key pair, publish the public key
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),  // notation: !Fact = persistent fact, not consumed by rules
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]


/*----------------*/
/* Protocol rules */
/*----------------*/

/* Question 1 here */

rule Init_1:
   let gxI = 'g'^~xI in
   [ Fr(~xI),
     !Pk($B, pkB) ]
   -->
   [ Init_1($A, ~xI, gxI, pkB),
     Out(<$A, aenc(gxI, pkB)>) ]

rule Resp_1:
   let gyR = 'g'^~yR
       kR = X^~yR
   in
   [ Fr(~yR),
     In(<a, aenc(X, pk(~kB))>),
     !Pk(a, pkA),
     !Key($B, ~kB) ]
   --[ RunningR($B, a, kR) ]->
   [ Resp_1($B, gyR, kR, ~kB),
     Out(<$B, aenc(<gyR, h(X)>, pkA)>) ]

rule Init_2:
   let kI = Y^~xI in
   [ Init_1($A, ~xI, gxI, pkB),
     In(<b, aenc(<Y, hX>, pk(~kA))>),
     !Key($A, ~kA) ]
   --[ FinishedI($A), 
       Eq(hX, h(gxI)),
       SecretI($A, b, kI),
       RunningI($A, b, kI),
       CommitI($A, b, kI) ]->
   [ Out(<$A, aenc(h(Y), pkB)>) ]

rule Resp_2:
   [ Resp_1($B, gyR, kR, ~kB),
     In(<a, aenc(hY, pk(~kB))>) ]
   --[ FinishedR($B),
       Eq(hY, h(gyR)),
       SecretR($B, a, kR),
       CommitR($B, a, kR) ]->
   []


/* ---------- */
/* Key Reveal */
/* ---------- */

/* Question 2 here */

rule RevealKey:
   [ !Key(A, kA) ]
   --[ Compromised(A) ]->
   [ K(kA) ]


/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Key secrecy:  (Question 3)
   in all traces, if a key is marked as secret between two uncompromised agents,
   then the attacker cannot learn it */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"



/* Key agreement:  (Question 4)
Please uncomment the following two lemmas for this question.
*/

lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI(A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"

end



